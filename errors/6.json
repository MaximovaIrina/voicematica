{"update_id": 942109870, "message": {"message_id": 1340, "from": {"id": 413997438, "is_bot": false, "first_name": "Михаил", "username": "Mievst", "language_code": "ru"}, "chat": {"id": 413997438, "first_name": "Михаил", "username": "Mievst", "type": "private"}, "date": 1684150982, "text": "Чтобы снизить затраты (и ограничить рамки этой и так длинной статьи), мы только переместим «основную» функциональность Polygon на Rust, и сделаем её подклассом из Python для реализации остального API.\n\nНаша struct будет выглядеть так:\n\n// \"Array1\" - это одномерный массив, и крейт \"numpy\" будет хорошо с ним взаимодействовать.\nuse ndarray::Array1;\n\n// \"subclass\" приказывает PyO3 разрешить создание подклассов этого на Python.\n#[pyclass(subclass)]\nstruct Polygon {\n    x: Array1<f64>,\n    y: Array1<f64>,\n    center: Array1<f64>,\n}\n\nМы хотим раскрыть poly.{x, y, center} следующим образом:\n\nСвойства.\nМассивы numpy.\n\nТакже нам понадобится конструктор, чтобы Python мог создавать новые Polygon.\n\nuse numpy::{PyArray1, PyReadonlyArray1, ToPyArray};\n\n#[pymethods]\nimpl Polygon {\n    #[new]\n    fn new(x: PyReadonlyArray1<f64>, y: PyReadonlyArray1<f64>) -> Polygon {\n        let x = x.as_array();\n        let y = y.as_array();\n        let center = Array1::from_vec(vec![x.mean().unwrap(), y.mean().unwrap()]);\n\n        Polygon {\n            x: x.to_owned(),\n            y: y.to_owned(),\n            center,\n        }\n    }\n    \n    // \"Py<..>\" в возвращаемом типе - это способ показать, что объект принадлежит Python\".\n    #[getter]               \n    fn x(&self, py: Python<'_>) -> PyResult<Py<PyArray1<f64>>> {\n        Ok(self.x.to_pyarray(py).to_owned()) // Создаём numpy-версию \"x\", которой будет владеть Python.\n    }\n\n    // То же для \"y\" и \"center\".\n}\n\nМы должны добавить нашу новую struct как класс в модуль:\n\n#[pymodule]\nfn poly_match_rs(_py: Python, m: &PyModule) -> PyResult<()> {\n    m.add_class::<Polygon>()?; // new.\n    m.add_function(wrap_pyfunction!(find_close_polygons, m)?)?;\n    Ok(())\n}\n\nА теперь мы можем дополнить код на Python, чтобы использовать его:\n\nclass Polygon(poly_match_rs.Polygon):\n    _area: float = None\n\n    def area(self) -> float:\n        ...\n\nМожно выполнить компиляцию, и это на самом деле заработает, только гораздо медленнее! (Помните, что x, y и center теперь нужно будет создавать новый массив numpy при каждой операции доступа).\n\nЧтобы повысить производительность, нам нужно извлечь исходный Polygon на Rust из списка Polygon Python.\n\nPyO3 очень гибок с таким типом операций, поэтому мы можем сделать это несколькими способами. Ограничение заключается в том, что нам также нужно возвращать Polygon языка Python и мы не хотим выполнять клонирование данных.\n\nМожно вручную вызывать .extract::<Polygon>(py)? для каждого PyObject, но мы попросим PyO3 давать нам непосредственно Py<Polygon>.\n\nЭто ссылка на принадлежащий Python объект, который, как мы ожидаем, содержит экземпляр (или в нашем случае подкласс) нативной структуры pyclass.\n\n#[pyfunction]\nfn find_close_polygons(\n    py: Python<'_>,\n    polygons: Vec<Py<Polygon>>,             // Ссылки на объекты, которыми владеет Python.\n    point: PyReadonlyArray1<f64>,\n    max_dist: f64,\n) -> PyResult<Vec<Py<Polygon>>> {           // Возвращает те же ссылки на \"Py\" без изменений.\n    let mut close_polygons = vec![];\n    let point = point.as_array();\n    for poly in polygons {\n        let center = poly.borrow(py).center // Должен использовать GIL (\"py\"), чтобы позаимствовать внутренний \"Polygon\".\n            .to_owned();\n\n        if (center - point).norm() < max_dist {\n            close_polygons.push(poly)\n        }\n    }\n\n    Ok(close_polygons)\n}\n\nПосмотрим, чего мы добились при помощи этого кода:\n\n$ python measure.py\nTook an avg of 6.29ms per iteration\n\nМы почти у цели! Осталось удвоить производительность!\n\n▍ v3 — избегаем распределений\n\nДавайте ещё раз запустим профилировщик.\n\n\nИнтерактивная версия находится здесь", "entities": [{"offset": 3407, "length": 10, "type": "url"}]}}